@model SellerBox.ViewModels.Statistics.ChatContentsViewModel

@{
    var XLabels = Newtonsoft.Json.JsonConvert.SerializeObject(Model.MessagesPerChatScenarios.Select(x => x.Date.ToString("dd MMMM yyyyг.")).ToList());
    var YValues = Newtonsoft.Json.JsonConvert.SerializeObject(Model.MessagesPerChatScenarios.Select(x => x.MessagesInChatScenarios.SelectMany(y => y.MessagesBySteps).Sum(y => y.MessagesCount)));
}

@section scripts {
    <script src="~/lib/chart.js/dist/Chart.bundle.min.js"></script>
    <script>
        function getRandomColor() {
            var letters = '0123456789ABCDEF';
            var color = '#';
            for (var i = 0; i < 6; i++) {
                color += letters[Math.floor(Math.random() * 16)];
            }
            return color;
        }

        var barChartData = {
            labels: @Html.Raw(XLabels),
            datasets: [
            {
                label: 'Получено сообщений',
                backgroundColor: getRandomColor(),
                data: @Html.Raw(YValues)
            }]
        };

        window.onload = function () {
            var ctx = document.getElementById('chart').getContext('2d');
            window.myBar = new Chart(ctx, {
                type: 'bar',
                data: barChartData,
                options: {
                    tooltips: {
                        mode: 'index',
                        intersect: false
                    },
                    responsive: true,
                    scales: {
                        xAxes: [{
                            stacked: true,
                        }],
                        yAxes: [{
                            stacked: true
                        }]
                    }
                }
            });
        };
    </script>
}

<h2>Статистика по чатботу</h2>
<div class="box-body">
    <div class="chart-container">
        <canvas id="chart" style="width:100%; height:500px"></canvas>
    </div>
</div>

Получено сообщений: @Model.TotalReceived